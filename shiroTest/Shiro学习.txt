Shiro 官方主页：http://shiro.apache.org/download.html

快速入门
1）导入jar包：
shrio核心包：shiro-core 
日志文件：slf4j-log4j12

2）引入log4j.properties文件：
log4j.rootLogger=INFO, stdout

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m %n

# General Apache libraries
log4j.logger.org.apache=WARN

# Spring
log4j.logger.org.springframework=WARN

# Default Shiro logging
log4j.logger.org.apache.shiro=TRACE

# Disable verbose logging
log4j.logger.org.apache.shiro.util.ThreadContext=WARN
log4j.logger.org.apache.shiro.cache.ehcache.EhCache=WARN

3）引入shiro.ini文件：
[users]
admin=amin
jack=123

4）测试：
1)读取配置文件：Factory<SecurityManager> factory=new IniSecurityManagerFactory("classpath:shiro.ini");
2)获取SecurityManager实例：SecurityManager securityManager=factory.getInstance();
3)将该实例绑定到SecurityUtils：SecurityUtils.setSecurityManager(securityManager);
4)得到当前执行的用户：Subject currentUser=SecurityUtils.getSubject();
5)创建token令牌，用户名/密码：UsernamePasswordToken token=new UsernamePasswordToken("admin", "admin");
6)身份认证：currentUser.login(token); 
try{
	// 身份认证
	currentUser.login(token);	
	System.out.println("身份认证成功！");
}catch(AuthenticationException e){
	e.printStackTrace();
	System.out.println("身份认证失败！");
}
7)退出：currentUser.logout();


Subject 认证主体：
Subject认证主体包括两个信息：
	Principals:身份，可以是用户名，邮件，手机号等，用来标识一个登录主体身份
	Credentials:凭证，常用有密码，数字证书等

身份认证流程：
Subject[login(token)]-->Security Manager-->Authenticator-->Authentication Strategy-->JDBC Realm或LDAP Realm等

Realm：意思是域，Shiro从Realm中获取验证数据；有很多种。常见有jdbc realm, text realm等


jdbc实现shiro验证：


权限认证(授权)：
权限认证，也就是访问控制，即在应用中控制谁能访问哪些资源。
核心三个要素：权限，角色和用户
权限：操作资源的权利，比如访问某个页面，以及对某个模块的数据的增删改查的权利
角色：是权限的集合，一种角色可以包含多种权限
用户：在Shiro种，代表访问系统的用户，即Subject

授权(3种)：
 编程式授权：基于角色的访问控制、基于权限的访问控制
 注解式授权
 JSP标签授权

编写shiro登录工具类：
public class ShiroUtil {
	public static Subject login(String configFile, String username, String password){
		//读取配置文件，初始化SecurityManager工厂
		Factory<SecurityManager> factory = new IniSecurityManagerFactory(configFile);
		//获取SecurityManager实例
		SecurityManager securityManager = factory.getInstance();
		// 把securityManager实例绑定到SecurityUtils
		SecurityUtils.setSecurityManager(securityManager);
		// 得到当前执行的用户
		Subject currentUser=SecurityUtils.getSubject();
		// 创建token令牌，用户名/密码
		UsernamePasswordToken token=new UsernamePasswordToken(username, password);
		try{
			// 身份认证
			currentUser.login(token);	
			System.out.println("身份认证成功！");
		}catch(AuthenticationException e){
			e.printStackTrace();
			System.out.println("身份认证失败！");
		}
		return currentUser;
	}
}

基于角色认证：
1)编写shiro_role.ini文件
[users]
admin=admin,role1,role2
jack=123,role1

2)测试有这些角色与否：
@Test
public void testCheckRole() {
	Subject currentUser=ShiroUtil.login("classpath:shiro_role.ini", "admin", "admin");
	// Subject currentUser=ShiroUtil.login("classpath:shiro_role.ini", "jack", "123");
	currentUser.checkRole("role1");
	currentUser.checkRoles(Arrays.asList("role1","role2"));
	currentUser.checkRoles("role1","role2","role3");
	
	currentUser.logout();
}

3)检查该用户是否有这些角色：
@Test
public void testHasRole() {
	Subject currentUser=ShiroUtil.login("classpath:shiro_role.ini", "admin", "admin");
//		Subject currentUser=ShiroUtil.login("classpath:shiro_role.ini", "jack", "123");
	System.out.println(currentUser.hasRole("role1")?"有role1这个角色":"没有role1这个角色");
	boolean []results=currentUser.hasRoles(Arrays.asList("role1","role2","role3"));
	System.out.println(results[0]?"有role1这个角色":"没有role1这个角色");
	System.out.println(results[1]?"有role2这个角色":"没有role2这个角色");
	System.out.println(results[2]?"有role3这个角色":"没有role3这个角色");
	System.out.println(currentUser.hasAllRoles(Arrays.asList("role1","role2"))?"role1,role2这两个角色都有":"role1,role2这个两个角色不全有");
	
	currentUser.logout();
}

基于角色-权限认证：
1)编写shiro_permission.ini文件
[users]
admin=admin,role1,role2
jack=123,role1
[roles]
role1=user:select
role2=user:add,user:update,user:delete

2)测试有这些权限与否：
@Test
public void testCheckPermitted() {
	Subject currentUser=ShiroUtil.login("classpath:shiro_permission.ini", "admin", "admin");
	// Subject currentUser=ShiroUtil.login("classpath:shiro_permission.ini", "jack", "123");
	currentUser.checkPermission("user:select");
	currentUser.checkPermissions("user:select","user:update","user:delete");
	currentUser.logout();
}

3)测试该用户是否有这些权限：
@Test
public void testIsPermitted() {
	Subject currentUser=ShiroUtil.login("classpath:shiro_permission.ini", "admin", "admin");
	// Subject currentUser=ShiroUtil.login("classpath:shiro_permission.ini", "jack", "123");
	System.out.println(currentUser.isPermitted("user:select")?"有user:select这个权限":"没有user:select这个权限");
	System.out.println(currentUser.isPermitted("user:update")?"有user:update这个权限":"没有user:update这个权限");
	boolean results[]=currentUser.isPermitted("user:select","user:update","user:delete");
	System.out.println(results[0]?"有user:select这个权限":"没有user:select这个权限");
	System.out.println(results[1]?"有user:update这个权限":"没有user:update这个权限");
	System.out.println(results[2]?"有user:delete这个权限":"没有user:delete这个权限");
	System.out.println(currentUser.isPermittedAll("user:select","user:update")?"有user:select,update这两个权限":"user:select,update这两个权限不全有");
	
	currentUser.logout();
}


Shiro过滤器：
anon(例如/admin/**=anon)：anon后面没有参数，表示该路径下的资源可以匿名使用
authc(例如/admin/user/**=authc)：authc后面没有参数，表示该路径下的资源需要认证(登录)才能使用，FormAuthenticationFilter是表单认证，没有参数。
perms(例如/admin/user/**=perms[user:add:*]或perms["user:add:*,user:modify:*"])：当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
user(例如/admin/user/**=user)：表示必须存在用户, 身份认证通过或通过记住我认证通过的可以访问，当登入操作时不做检查。
roles(例如/admin/user/**=roles[admin]或roles["admin,guest"])：每个参数通过才算通过，相当于hasAllRoles()方法。

开启controller类aop支持
对系统中类的方法给用户授权，建议在controller层进行方法授权，在springmvc.xml中配置:
   <!-- 开启aop，对类代理 -->
   <aop:config proxy-target-class="true"> </aop:config>
   <!-- 开启shiro注解支持 -->
   <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
       <property name="securityManager" ref="securityManager" />
   </bean>

在controller方法中添加注解：
@RequestMapping("/queryItems")
@RequiresPermissions("item:query")
public ModelAndView queryItems() throws Exception {
	...
}


注解式授权：
@RequiresAuthentication：要求当前Subject已经在当前的session中被验证通过才能被访问或调用。
@RequiresGuest：要求当前的Subject是一个"guest"，也就是说，他们必须是在之前的session中没有被验证或被记住才能被访问或调用
@RequiresPermissions("account:create")：要求当前的Subject被允许一个或多个权限，以便执行注解的方法。
@RequiresRoles("administrator")：要求当前的Subject拥有所有指定的角色。如果没有，则方法将不会被执行，而且抛出AuthorizationException异常。
@RequiresUser RequiresUser注解需要当前的Subject是一个应用程序用户才能被注解的类/实例/方法访问或调用。一个"应用程序用户"被定义为一个拥有已知身份，或在当前session中由于通过验证被确认，或者在之前session中的'Remember me'服务被记住

Jsp标签授权：
<%@ taglib prefix="shiro" uri="http://shiro.apache.org/tags" %>
Guest 标签：用户没有身份验证时显示相应信息，即游客访问信息；
User 标签：用户已经身份验证/记住我登录后显示相应的信息；
Authenticated 标签：用户已经身份验证通过，即 Subject.login 登录成功，不是记住我登录的。
notAuthenticated 标签：用户没有身份验证通过，即没有调用 Subject.login 进行登录，包括记住我自动登录的也属于未进行身份验证。
principal 标签 显示用户身份信息，默认调用 Subject.getPrincipal()获取，即 Primary Principal.
hasRole 标签 如果当前 Subject 有角色将显示 body 体内容。
lacksRole 标签 如果当前 Subject 没有角色将显示 body 体内容。
hasAnyRoles 标签 如果当前 Subject 有任意一个角色（或的关系）将显示 body 体内容。
hasPermission 标签 如果当前 Subject 有权限将显示 body 体内容。
lacksPermission 标签 如果当前 Subject 没有权限将显示 body 体内容。


Permissions对权限深入理解:
单个权限 query：
单个资源多个资源 user:query user:add 多值 user:query,add
单个资源所有权限 user:query,add,update,delete user:*
所有资源某个权限 *:view

实例级别的权限控制：
单个实例的单个权限 printer:query:lp7200  printer:print:epsoncolor
所有实例的单个权限 printer:print:*
所有实例的所有权限 printer:*:*
单个实例的所有权限 printer:*:lp7200
单个实例的多个权限 printer:query,print:lp7200

授权流程：
Subject-->Security Manager-->Authorizer-->JDBC Realm

URL路径支持Ant风格:
? 匹配一个字符 /admin? 可以匹配/admin1 /admin2 但是不能匹配/admin12 /admin
* 匹配零个或者一个或者多个字符 /admin* 可以匹配 /admin /admin1 /admin12 但是不能匹配/admin/abc
** 匹配零个或者多个路径 /admin/** 可以匹配/admin /admin/a /admin/a/b


Shiro Web集成：

shiro标签使用：
<shiro:hasRole name="admin">
	欢迎有admin角色的用户！<shiro:principal/>
</shiro:hasRole>
<shiro:hasPermission name="student:create">
	欢迎有student:create权限的用户！<shiro:principal/>
</shiro:hasPermission>

Shrio会话机制：
Session session = subject.getSession();


自定义Realm：

加密：
base64加密：Base64.encodeToString(str.getBytes());
base64解密：Base64.decodeToString(str);
md5加密：new Md5Hash(str, salt).toString(); //salt-盐值，自设定


Shiro支持弹性：
Web支持：
并发支持：
测试支持：
"Run As"支持：
"Remenber Me"支持：



